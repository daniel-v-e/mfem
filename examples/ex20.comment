                                MFEM Example 20

 Compile with: make ex20

 Sample runs:  ex20
               ex20 -p 1 -o 1 -n 120 -dt 0.1
               ex20 -p 1 -o 2 -n 60 -dt 0.2
               ex20 -p 1 -o 3 -n 40 -dt 0.3
               ex20 -p 1 -o 4 -n 30 -dt 0.4

 Description: This example demonstrates the use of the variable order,
              symplectic ODE integration algorithm.  Symplectic integration
              algorithms are designed to conserve energy when integrating, in
              time, systems of ODEs which are derived from Hamiltonian
              systems.

              Hamiltonian systems define the energy of a system as a function
              of time (t), a set of generalized coordinates (q), and their
              corresponding generalized momenta (p).

                 H(q,p,t) = T(p) + V(q,t)

              Hamilton's equations then specify how q and p evolve in time:

                 dq/dt =  dH/dp
                 dp/dt = -dH/dq

              To use the symplectic integration classes we need to define an
              mfem::Operator P which evaluates the action of dH/dp, and an
              mfem::TimeDependentOperator F which computes -dH/dq.

              This example offers five simple 1D Hamiltonians:
              0) Simple Harmonic Oscillator (mass on a spring)
                 H = ( p^2 / m + q^2 / k ) / 2
              1) Pendulum
                 H = ( p^2 / m - k ( 1 - cos(q) ) ) / 2
              2) Gaussian Potential Well
                 H = ( p^2 / m ) / 2 - k exp(-q^2 / 2)
              3) Quartic Potential
                 H = ( p^2 / m + k ( 1 + q^2 ) q^2 ) / 2
              4) Negative Quartic Potential
                 H = ( p^2 / m + k ( 1 - q^2 /8 ) q^2 ) / 2

              In all cases these Hamiltonians are shifted by constant values
              so that the energy will remain positive. The mean and standard
              deviation of the computed energies at each time step are
              displayed upon completion.

              We then use GLVis to visualize the results in a non-standard way
              by defining the axes to be q, p, and t rather than x, y, and z.
              In this space we build a ribbon-like mesh with nodes at (0,0,t)
              and (q,p,t). Finally we plot the energy as a function of time
              as a scalar field on this ribbon-like mesh.

              For a more traditional plot of the results, including q, p, and
              H, can be obtained by selecting the "-gp" option. This creates
              a data file and input deck for the GnuPlot application (not
              included with MFEM). To visualize these results on most Linux
              systems type the command "gnuplot gnuplot_ex20.inp". The data
              file, named "ex20.dat", should be simple enough to display with
              other plotting programs as well.
