                       MFEM Example 15 - Parallel Version

 Compile with: make ex15p

 Sample runs:  mpirun -np 4 ex15p
               mpirun -np 4 ex15p -o 1 -y 0.2
               mpirun -np 4 ex15p -o 4 -y 0.1
               mpirun -np 4 ex15p -n 5
               mpirun -np 4 ex15p -p 1 -n 3

               Other meshes:

               mpirun -np 4 ex15p -m ../data/square-disc-nurbs.mesh
               mpirun -np 4 ex15p -m ../data/disc-nurbs.mesh
               mpirun -np 4 ex15p -m ../data/fichera.mesh -tf 0.5
               mpirun -np 4 ex15p -m ../data/ball-nurbs.mesh -tf 0.5
               mpirun -np 4 ex15p -m ../data/mobius-strip.mesh
               mpirun -np 4 ex15p -m ../data/amr-quad.mesh
               mpirun -np 4 ex15p -m ../data/square-disc.mesh
               mpirun -np 4 ex15p -m ../data/escher.mesh -r 2 -tf 0.3

               Different estimators:

               mpirun -np 4 ex15p -est 0 -e 1e-4
               mpirun -np 4 ex15p -est 1 -e 1e-6
               mpirun -np 4 ex15p -est 1 -o 3 -tf 0.3
               mpirun -np 4 ex15p -est 2 -o 2

 Description:  Building on Example 6, this example demonstrates dynamic AMR.
               The mesh is adapted to a time-dependent solution by refinement
               as well as by derefinement. For simplicity, the solution is
               prescribed and no time integration is done. However, the error
               estimation and refinement/derefinement decisions are realistic.

               At each outer iteration the right hand side function is changed
               to mimic a time dependent problem.  Within each inner iteration
               the problem is solved on a sequence of meshes which are locally
               refined according to a chosen error estimator. Currently there
               are three error estimators supported: A L2 formulation of the
               Zienkiewicz-Zhu error estimator (0), a Kelly error indicator (1)
               and a traditional Zienkiewicz-Zhu error estimator (2). At the
               end of the inner iteration the error estimates are also used to
               identify any elements which may be over-refined and a single
               derefinement step is performed.  After each refinement or
               derefinement step a rebalance operation is performed to keep
               the mesh evenly distributed among the available processors.

               The example demonstrates MFEM's capability to refine, derefine
               and load balance nonconforming meshes, in 2D and 3D, and on
               linear, curved and surface meshes. Interpolation of functions
               between coarse and fine meshes, persistent GLVis visualization,
               and saving of time-dependent fields for external visualization
               with VisIt (visit.llnl.gov) are also illustrated.

               We recommend viewing Examples 1, 6 and 9 before viewing this
               example.
