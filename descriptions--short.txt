ex0: This example code demonstrates the most basic usage of MFEM to define a simple finite element discretization of the Laplace problem -Delta u = 1 with zero Dirichlet boundary conditions. General 2D/3D mesh files and finite element polynomial degrees can be specified by command line options.

ex1: This example code demonstrates the use of MFEM to define a simple finite element discretization of the Laplace problem -Delta u = 1 with homogeneous Dirichlet boundary conditions. Specifically, we discretize using a FE space of the specified order, or if order < 1 using an isoparametric/isogeometric space (i.e. quadratic for quadratic curvilinear mesh, NURBS for NURBS mesh, etc.) The example highlights the use of mesh refinement, finite element grid functions, as well as linear and bilinear forms corresponding to the left-hand side and right-hand side of the discrete linear system. We also cover the explicit elimination of essential boundary conditions, static condensation, and the optional connection to the GLVis tool for visualization.

ex2: This example code solves a simple linear elasticity problem describing a multi-material cantilever beam. Specifically, we approximate the weak form of -div(sigma(u))=0 where sigma(u)=lambda*div(u)*I+mu*(grad*u+u*grad) is the stress tensor corresponding to displacement field u, and lambda and mu are the material Lame constants. The boundary conditions are u=0 on the fixed part of the boundary with attribute 1, and sigma(u).n=f on the remainder with f being a constant pull down vector on boundary elements with attribute 2, and zero otherwise. The geometry of the domain is assumed to be as follows: +----------+----------+ boundary --->| material | material |<--- boundary attribute 1 | 1 | 2 | attribute 2 (fixed) +----------+----------+ (pull down) The example demonstrates the use of high-order and NURBS vector finite element spaces with the linear elasticity bilinear form, meshes with curved elements, and the definition of piece-wise constant and vector coefficient objects. Static condensation is also illustrated. We recommend viewing Example 1 before viewing this example.

ex3: This example code solves a simple electromagnetic diffusion problem corresponding to the second order definite Maxwell equation curl curl E + E = f with boundary condition E x n = <given tangential field>. Here, we use a given exact solution E and compute the corresponding r.h.s. f. We discretize with Nedelec finite elements in 2D or 3D. The example demonstrates the use of H(curl) finite element spaces with the curl-curl and the (vector finite element) mass bilinear form, as well as the computation of discretization error when the exact solution is known. Static condensation is also illustrated. We recommend viewing examples 1-2 before viewing this example.

ex4: This example code solves a simple 2D/3D H(div) diffusion problem corresponding to the second order definite equation -grad(alpha div F) + beta F = f with boundary condition F dot n = <given normal field>. Here, we use a given exact solution F and compute the corresponding r.h.s. f. We discretize with Raviart-Thomas finite elements. The example demonstrates the use of H(div) finite element spaces with the grad-div and H(div) vector finite element mass bilinear form, as well as the computation of discretization error when the exact solution is known. Bilinear form hybridization and static condensation are also illustrated. We recommend viewing examples 1-3 before viewing this example.

ex5: This example code solves a simple 2D/3D mixed Darcy problem corresponding to the saddle point system k*u + grad p = f - div u = g with natural boundary condition -p = <given pressure>. Here, we use a given exact solution (u,p) and compute the corresponding r.h.s. (f,g). We discretize with Raviart-Thomas finite elements (velocity u) and piecewise discontinuous polynomials (pressure p). The example demonstrates the use of the BlockOperator class, as well as the collective saving of several grid functions in VisIt (visit.llnl.gov) and ParaView (paraview.org) formats. We recommend viewing examples 1-4 before viewing this example.

ex6: This is a version of Example 1 with a simple adaptive mesh refinement loop. The problem being solved is again the Laplace equation -Delta u = 1 with homogeneous Dirichlet boundary conditions. The problem is solved on a sequence of meshes which are locally refined in a conforming (triangles, tetrahedrons) or non-conforming (quadrilaterals, hexahedra) manner according to a simple ZZ error estimator. The example demonstrates MFEM's capability to work with both conforming and nonconforming refinements, in 2D and 3D, on linear, curved and surface meshes. Interpolation of functions from coarse to fine meshes, as well as persistent GLVis visualization are also illustrated. We recommend viewing Example 1 before viewing this example.

ex7: This example code demonstrates the use of MFEM to define a triangulation of a unit sphere and a simple isoparametric finite element discretization of the Laplace problem with mass term, -Delta u + u = f. The example highlights mesh generation, the use of mesh refinement, high-order meshes and finite elements, as well as surface-based linear and bilinear forms corresponding to the left-hand side and right-hand side of the discrete linear system. Simple local mesh refinement is also demonstrated. We recommend viewing Example 1 before viewing this example.

ex8: This example code demonstrates the use of the Discontinuous Petrov-Galerkin (DPG) method in its primal 2x2 block form as a simple finite element discretization of the Laplace problem -Delta u = f with homogeneous Dirichlet boundary conditions. We use high-order continuous trial space, a high-order interfacial (trace) space, and a high-order discontinuous test space defining a local dual (H^{-1}) norm. We use the primal form of DPG, see "A primal DPG method without a first-order reformulation", Demkowicz and Gopalakrishnan, CAM 2013, DOI:10.1016/j.camwa.2013.06.029. The example highlights the use of interfacial (trace) finite elements and spaces, trace face integrators and the definition of block operators and preconditioners. We recommend viewing examples 1-5 before viewing this example.

ex9: This example code solves the time-dependent advection equation du/dt + v.grad(u) = 0, where v is a given fluid velocity, and u0(x)=u(0,x) is a given initial condition. The example demonstrates the use of Discontinuous Galerkin (DG) bilinear forms in MFEM (face integrators), the use of implicit and explicit ODE time integrators, the definition of periodic boundary conditions through periodic meshes, as well as the use of GLVis for persistent visualization of a time-evolving solution. The saving of time-dependent data files for external visualization with VisIt (visit.llnl.gov) and ParaView (paraview.org) is also illustrated.

ex10: This examples solves a time dependent nonlinear elasticity problem of the form dv/dt = H(x) + S v, dx/dt = v, where H is a hyperelastic model and S is a viscosity operator of Laplacian type. The geometry of the domain is assumed to be as follows: +---------------------+ boundary --->| | attribute 1 | | (fixed) +---------------------+ The example demonstrates the use of nonlinear operators (the class HyperelasticOperator defining H(x)), as well as their implicit time integration using a Newton method for solving an associated reduced backward-Euler type nonlinear equation (class ReducedSystemOperator). Each Newton step requires the inversion of a Jacobian matrix, which is done through a (preconditioned) inner solver. Note that implementing the method HyperelasticOperator::ImplicitSolve is the only requirement for high-order implicit (SDIRK) time integration. We recommend viewing examples 2 and 9 before viewing this example.

ex14: This example code demonstrates the use of MFEM to define a discontinuous Galerkin (DG) finite element discretization of the Laplace problem -Delta u = 1 with homogeneous Dirichlet boundary conditions. Finite element spaces of any order, including zero on regular grids, are supported. The example highlights the use of discontinuous spaces and DG-specific face integrators. We recommend viewing examples 1 and 9 before viewing this example.

ex15: Building on Example 6, this example demonstrates dynamic AMR. The mesh is adapted to a time-dependent solution by refinement as well as by derefinement. For simplicity, the solution is prescribed and no time integration is done. However, the error estimation and refinement/derefinement decisions are realistic. At each outer iteration the right hand side function is changed to mimic a time dependent problem. Within each inner iteration the problem is solved on a sequence of meshes which are locally refined according to a simple ZZ or Kelly error estimator. At the end of the inner iteration the error estimates are also used to identify any elements which may be over-refined and a single derefinement step is performed. The example demonstrates MFEM's capability to refine and derefine nonconforming meshes, in 2D and 3D, and on linear, curved and surface meshes. Interpolation of functions between coarse and fine meshes, persistent GLVis visualization, and saving of time-dependent fields for external visualization with VisIt (visit.llnl.gov) are also illustrated. We recommend viewing Examples 1, 6 and 9 before viewing this example.

ex16: This example solves a time dependent nonlinear heat equation problem of the form du/dt = C(u), with a non-linear diffusion operator C(u) = \nabla \cdot (\kappa + \alpha u) \nabla u. The example demonstrates the use of nonlinear operators (the class ConductionOperator defining C(u)), as well as their implicit time integration. Note that implementing the method ConductionOperator::ImplicitSolve is the only requirement for high-order implicit (SDIRK) time integration. In this example, the diffusion operator is linearized by evaluating with the lagged solution from the previous timestep, so there is only a linear solve. We recommend viewing examples 2, 9 and 10 before viewing this example.

ex17: This example code solves a simple linear elasticity problem describing a multi-material cantilever beam using symmetric or non-symmetric discontinuous Galerkin (DG) formulation. Specifically, we approximate the weak form of -div(sigma(u))=0 where sigma(u)=lambda*div(u)*I+mu*(grad*u+u*grad) is the stress tensor corresponding to displacement field u, and lambda and mu are the material Lame constants. The boundary conditions are Dirichlet, u=u_D on the fixed part of the boundary, namely boundary attributes 1 and 2; on the rest of the boundary we use sigma(u).n=0 b.c. The geometry of the domain is assumed to be as follows: +----------+----------+ boundary --->| material | material |<--- boundary attribute 1 | 1 | 2 | attribute 2 (fixed) +----------+----------+ (fixed, nonzero) The example demonstrates the use of high-order DG vector finite element spaces with the linear DG elasticity bilinear form, meshes with curved elements, and the definition of piece-wise constant and function vector-coefficient objects. The use of non-homogeneous Dirichlet b.c. imposed weakly, is also illustrated. We recommend viewing examples 2 and 14 before viewing this example.

ex18: This example code solves the compressible Euler system of equations, a model nonlinear hyperbolic PDE, with a discontinuous Galerkin (DG) formulation. Specifically, it solves for an exact solution of the equations whereby a vortex is transported by a uniform flow. Since all boundaries are periodic here, the method's accuracy can be assessed by measuring the difference between the solution and the initial condition at a later time when the vortex returns to its initial location. Note that as the order of the spatial discretization increases, the timestep must become smaller. This example currently uses a simple estimate derived by Cockburn and Shu for the 1D RKDG method. An additional factor can be tuned by passing the --cfl (or -c shorter) flag. The example demonstrates user-defined bilinear and nonlinear form integrators for systems of equations that are defined with block vectors, and how these are used with an operator for explicit time integrators. In this case the system also involves an external approximate Riemann solver for the DG interface flux. It also demonstrates how to use GLVis for in-situ visualization of vector grid functions. We recommend viewing examples 9, 14 and 17 before viewing this example.

ex19: This examples solves a quasi-static incompressible nonlinear elasticity problem of the form 0 = H(x), where H is an incompressible hyperelastic model and x is a block state vector containing displacement and pressure variables. The geometry of the domain is assumed to be as follows: +---------------------+ boundary --->| |<--- boundary attribute 1 | | attribute 2 (fixed) +---------------------+ (fixed, nonzero) The example demonstrates the use of block nonlinear operators (the class RubberOperator defining H(x)) as well as a nonlinear Newton solver for the quasi-static problem. Each Newton step requires the inversion of a Jacobian matrix, which is done through a (preconditioned) inner solver. The specialized block preconditioner is implemented as a user-defined solver. We recommend viewing examples 2, 5, and 10 before viewing this example.

ex20: This example demonstrates the use of the variable order, symplectic ODE integration algorithm. Symplectic integration algorithms are designed to conserve energy when integrating, in time, systems of ODEs which are derived from Hamiltonian systems. Hamiltonian systems define the energy of a system as a function of time (t), a set of generalized coordinates (q), and their corresponding generalized momenta (p). H(q,p,t) = T(p) + V(q,t) Hamilton's equations then specify how q and p evolve in time: dq/dt = dH/dp dp/dt = -dH/dq To use the symplectic integration classes we need to define an mfem::Operator P which evaluates the action of dH/dp, and an mfem::TimeDependentOperator F which computes -dH/dq. This example offers five simple 1D Hamiltonians: 0) Simple Harmonic Oscillator (mass on a spring) H = ( p^2 / m + q^2 / k ) / 2 1) Pendulum H = ( p^2 / m - k ( 1 - cos(q) ) ) / 2 2) Gaussian Potential Well H = ( p^2 / m ) / 2 - k exp(-q^2 / 2) 3) Quartic Potential H = ( p^2 / m + k ( 1 + q^2 ) q^2 ) / 2 4) Negative Quartic Potential H = ( p^2 / m + k ( 1 - q^2 /8 ) q^2 ) / 2 In all cases these Hamiltonians are shifted by constant values so that the energy will remain positive. The mean and standard deviation of the computed energies at each time step are displayed upon completion. We then use GLVis to visualize the results in a non-standard way by defining the axes to be q, p, and t rather than x, y, and z. In this space we build a ribbon-like mesh with nodes at (0,0,t) and (q,p,t). Finally we plot the energy as a function of time as a scalar field on this ribbon-like mesh. For a more traditional plot of the results, including q, p, and H, can be obtained by selecting the "-gp" option. This creates a data file and input deck for the GnuPlot application (not included with MFEM). To visualize these results on most Linux systems type the command "gnuplot gnuplot_ex20.inp". The data file, named "ex20.dat", should be simple enough to display with other plotting programs as well.

ex21: This is a version of Example 2 with a simple adaptive mesh refinement loop. The problem being solved is again the linear elasticity describing a multi-material cantilever beam. The problem is solved on a sequence of meshes which are locally refined in a conforming (triangles, tetrahedrons) or non-conforming (quadrilaterals, hexahedra) manner according to a simple ZZ error estimator. The example demonstrates MFEM's capability to work with both conforming and nonconforming refinements, in 2D and 3D, on linear and curved meshes. Interpolation of functions from coarse to fine meshes, as well as persistent GLVis visualization are also illustrated. We recommend viewing Examples 2 and 6 before viewing this example.

ex22: This example code demonstrates the use of MFEM to define and solve simple complex-valued linear systems. It implements three variants of a damped harmonic oscillator: 1) A scalar H1 field -Div(a Grad u) - omega^2 b u + i omega c u = 0 2) A vector H(Curl) field Curl(a Curl u) - omega^2 b u + i omega c u = 0 3) A vector H(Div) field -Grad(a Div u) - omega^2 b u + i omega c u = 0 In each case the field is driven by a forced oscillation, with angular frequency omega, imposed at the boundary or a portion of the boundary. In electromagnetics, the coefficients are typically named the permeability, mu = 1/a, permittivity, epsilon = b, and conductivity, sigma = c. The user can specify these constants using either set of names. The example also demonstrates how to display a time-varying solution as a sequence of fields sent to a single GLVis socket. We recommend viewing examples 1, 3 and 4 before viewing this example.

ex23: This example solves the wave equation problem of the form: d^2u/dt^2 = c^2 \Delta u. The example demonstrates the use of time dependent operators, implicit solvers and second order time integration. We recommend viewing examples 9 and 10 before viewing this example.

ex24: This example code illustrates usage of mixed finite element spaces, with three variants: 1) (grad p, u) for p in H^1 tested against u in H(curl) 2) (curl v, u) for v in H(curl) tested against u in H(div), 3D 3) (div v, q) for v in H(div) tested against q in L_2 Using different approaches, we project the gradient, curl, or divergence to the appropriate space. We recommend viewing examples 1, 3, and 5 before viewing this example.

ex25: This example code solves a simple electromagnetic wave propagation problem corresponding to the second order indefinite Maxwell equation (1/mu) * curl curl E - \omega^2 * epsilon E = f with a Perfectly Matched Layer (PML). The example demonstrates discretization with Nedelec finite elements in 2D or 3D, as well as the use of complex-valued bilinear and linear forms. Several test problems are included, with prob = 0-3 having known exact solutions, see "On perfectly matched layers for discontinuous Petrov-Galerkin methods" by Vaziri Astaneh, Keith, Demkowicz, Comput Mech 63, 2019. We recommend viewing Example 22 before viewing this example.

ex26: This example code demonstrates the use of MFEM to define a simple finite element discretization of the Laplace problem -Delta u = 1 with homogeneous Dirichlet boundary conditions as in Example 1. It highlights on the creation of a hierarchy of discretization spaces with partial assembly and the construction of an efficient multigrid preconditioner for the iterative solver. We recommend viewing Example 1 before viewing this example.

ex27: This example code demonstrates the use of MFEM to define a simple finite element discretization of the Laplace problem -Delta u = 0 with a variety of boundary conditions. Specifically, we discretize using a FE space of the specified order using a continuous or discontinuous space. We then apply Dirichlet, Neumann (both homogeneous and inhomogeneous), Robin, and Periodic boundary conditions on different portions of a predefined mesh. The predefined mesh consists of a rectangle with two holes removed (see below). The narrow ends of the mesh are connected to form a Periodic boundary condition. The lower edge (tagged with attribute 1) receives an inhomogeneous Neumann boundary condition. A Robin boundary condition is applied to upper edge (attribute 2). The circular hole on the left (attribute 3) enforces a Dirichlet boundary condition. Finally, a natural boundary condition, or homogeneous Neumann BC, is applied to the circular hole on the right (attribute 4). Attribute 3 ^ y Attribute 2 \ | / +-----------+-----------+ | \_ | _ | | / \ | / \ | <--+---+---+---+---+---+---+--> x | \_/ | \_/ | | | \ | +-----------+-----------+ (hole radii are / | \ adjustable) Attribute 1 v Attribute 4 The boundary conditions are defined as (where u is the solution field): Dirichlet: u = d Neumann: n.Grad(u) = g Robin: n.Grad(u) + a u = b The user can adjust the values of 'd', 'g', 'a', and 'b' with command line options. This example highlights the differing implementations of boundary conditions with continuous and discontinuous Galerkin formulations of the Laplace problem. We recommend viewing Examples 1 and 14 before viewing this example.

ex28: Demonstrates a sliding boundary condition in an elasticity problem. A trapezoid, roughly as pictured below, is pushed from the right into a rigid notch. Normal displacement is restricted, but tangential movement is allowed, so the trapezoid compresses into the notch. /-------+ normal constrained --->/ | <--- boundary force (2) boundary (4) /---------+ ^ | normal constrained boundary (1) This example demonstrates the use of the ConstrainedSolver framework. We recommend viewing Example 2 before viewing this example.

ex29: This example code demonstrates the use of MFEM to define a finite element discretization of a PDE on a 2 dimensional surface embedded in a 3 dimensional domain. In this case we solve the Laplace problem -Div(sigma Grad u) = 1, with homogeneous Dirichlet boundary conditions, where sigma is an anisotropic diffusion constant defined as a 3x3 matrix coefficient. This example demonstrates the use of finite element integrators on 2D domains with 3D coefficients. We recommend viewing examples 1 and 7 before viewing this example.

ex30: This is an example of adaptive mesh refinement preprocessing which lowers the data oscillation [1] to a user-defined relative threshold. There is no PDE being solved. MFEM's capability to work with both conforming and nonconforming meshes is demonstrated in example 6. In some problems, the material data or loading data is not sufficiently resolved on the initial mesh. This missing fine scale data reduces the accuracy of the solution as well as the accuracy of some local error estimators. By preprocessing the mesh before solving the PDE, many issues can be avoided. [1] Morin, P., Nochetto, R. H., & Siebert, K. G. (2000). Data oscillation and convergence of adaptive FEM. SIAM Journal on Numerical Analysis, 38(2), 466-488. [2] Mitchell, W. F. (2013). A collection of 2D elliptic problems for testing adaptive grid refinement algorithms. Applied mathematics and computation, 220, 350-364.

ex31: This example code solves a simple electromagnetic diffusion problem corresponding to the second order definite Maxwell equation curl curl E + sigma E = f with boundary condition E x n = <given tangential field>. In this example sigma is an anisotropic 3x3 tensor. Here, we use a given exact solution E and compute the corresponding r.h.s. f. We discretize with Nedelec finite elements in 1D, 2D, or 3D. The example demonstrates the use of restricted H(curl) finite element spaces with the curl-curl and the (vector finite element) mass bilinear form, as well as the computation of discretization error when the exact solution is known. These restricted spaces allow the solution of 1D or 2D electromagnetic problems which involve 3D field vectors. Such problems arise in plasma physics and crystallography. We recommend viewing example 3 before viewing this example.

ex33: In this example we solve the following fractional PDE with MFEM: ( - Δ )^α u = f in Ω, u = 0 on ∂Ω, 0 < α, To solve this FPDE, we apply the operator ( - Δ )^(-N), where the integer N is given by floor(α). By doing so, we obtain ( - Δ )^(α-N) u = ( - Δ )^(-N) f in Ω, u = 0 on ∂Ω, 0 < α. We first compute the right hand side by solving the integer order PDE ( - Δ )^N g = f in Ω, g = ( - Δ )^k g = 0 on ∂Ω, k = 1,..,N-1 The remaining FPDE is then given by ( - Δ )^(α-N) u = g in Ω, u = 0 on ∂Ω. We rely on a rational approximation [2] of the normal linear operator A^{-α + N}, where A = - Δ (with associated homogeneous boundary conditions) and (a-N) in (0,1). We approximate the operator A^{-α+N} ≈ Σ_{i=0}^M c_i (A + d_i I)^{-1}, d_0 = 0, d_i > 0, where I is the L2-identity operator and the coefficients c_i and d_i are generated offline to a prescribed accuracy in a pre-processing step. We use the triple-A algorithm [1] to generate the rational approximation that this partial fractional expansion derives from. We then solve M+1 independent integer-order PDEs, A u_i + d_i u_i = c_i g in Ω, u_i = 0 on ∂Ω, i=0,...,M, using MFEM and sum u_i to arrive at an approximate solution of the FPDE u ≈ Σ_{i=0}^M u_i. (If alpha is an integer, we stop after the first PDE was solved.)

ex34: This example code solves a simple magnetostatic problem curl curl A = J where the current density J is computed on a subset of the domain as J = -sigma grad phi. We discretize the vector potential with Nedelec finite elements, the scalar potential with Lagrange finite elements, and the current density with Raviart-Thomas finite elements. The example demonstrates the use of a SubMesh to compute the scalar potential and its associated current density which is then transferred to the original mesh and used as a source function. Note that this example takes certain liberties with the current density which is not necessarily divergence free as it should be. This was done to focus on the use of the SubMesh to transfer information between a full mesh and a sub-domain. A more rigorous implementation might employ an H(div) saddle point solver to obtain a divergence free J on the SubMesh. It would then also need to ensure that the r.h.s. of curl curl A = J does in fact lie in the range of the weak curl operator by performing a divergence cleaning procedure before the solve. After divergence cleaning the delta parameter would probably not be needed. This example is designed to make use of a specific mesh which has a known configuration of elements and boundary attributes. Other meshes could be used but extra care would be required to properly define the SubMesh and the necessary boundaries. We recommend viewing examples 1 and 3 before viewing this example.

ex36: This example code demonstrates the use of MFEM to solve the bound-constrained energy minimization problem minimize ||∇u||² subject to u ≥ ϕ in H¹₀. This is known as the obstacle problem, and it is a simple mathematical model for contact mechanics. In this example, the obstacle ϕ is a half-sphere centered at the origin of a circular domain Ω. After solving to a specified tolerance, the numerical solution is compared to a closed-form exact solution to assess accuracy. The problem is discretized and solved using the proximal Galerkin finite element method, introduced by Keith and Surowiec [1]. This example highlights the ability of MFEM to deliver high- order solutions to variation inequality problems and showcases how to set up and solve nonlinear mixed methods.